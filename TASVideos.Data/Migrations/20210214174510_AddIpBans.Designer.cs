// <auto-generated />
using System;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TASVideos.Data;

namespace TASVideos.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210214174510_AddIpBans")]
    partial class AddIpBans
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("TASVideos.Data.Entity.Awards.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Awards.PublicationAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AwardId")
                        .HasColumnType("int");

                    b.Property<int>("PublicationId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.HasIndex("PublicationId");

                    b.ToTable("PublicationAwards");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Awards.UserAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AwardId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAwards");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Flag", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermissionRestriction")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Flags");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<bool>("Restricted")
                        .HasColumnType("bit");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Forums");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ForumCategories");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPoll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ForumPolls");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPollOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("ForumPollOptions");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPollOptionVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PollOptionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PollOptionId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPollOptionVotes");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnableBbCode")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableHtml")
                        .HasColumnType("bit");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PosterId")
                        .HasColumnType("int");

                    b.Property<int>("PosterMood")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PosterId");

                    b.HasIndex("TopicId");

                    b.ToTable("ForumPosts");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForumId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PollId")
                        .HasColumnType("int");

                    b.Property<int>("PosterId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.HasIndex("PageName")
                        .IsUnique()
                        .HasDatabaseName("PageNameIndex")
                        .HasFilter("([PageName] IS NOT NULL)");

                    b.HasIndex("PollId")
                        .IsUnique()
                        .HasFilter("[PollId] IS NOT NULL");

                    b.HasIndex("PosterId");

                    b.ToTable("ForumTopics");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumTopicWatch", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ForumTopicId")
                        .HasColumnType("int");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "ForumTopicId");

                    b.HasIndex("ForumTopicId");

                    b.ToTable("ForumTopicWatches");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GameResourcesPage")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("GoodName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenshotUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SearchKey")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("SystemId")
                        .HasColumnType("int");

                    b.Property<string>("YoutubeTags")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("SystemId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameGameGroup", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GameGroupId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "GameGroupId");

                    b.HasIndex("GameGroupId");

                    b.HasIndex("GameId");

                    b.ToTable("GameGameGroups");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameGenre", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GameId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenres");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SearchKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GameGroups");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameRamAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<long>("Address")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Endian")
                        .HasColumnType("int");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GameRamAddressDomainId")
                        .HasColumnType("int");

                    b.Property<string>("LegacyGameName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Signed")
                        .HasColumnType("int");

                    b.Property<int>("SystemId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameRamAddressDomainId");

                    b.HasIndex("SystemId");

                    b.ToTable("GameRamAddresses");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameRamAddressDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("GameSystemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("GameSystemId");

                    b.ToTable("GameRamAddressDomains");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameRom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Md5")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sha1")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("Md5")
                        .IsUnique()
                        .HasFilter("([Sha1] IS NOT NULL)");

                    b.HasIndex("Sha1")
                        .IsUnique()
                        .HasFilter("([Sha1] IS NOT NULL)");

                    b.ToTable("GameRoms");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameSystem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("([Code] IS NOT NULL)");

                    b.ToTable("GameSystems");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameSystemFrameRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FrameRate")
                        .HasColumnType("float");

                    b.Property<int>("GameSystemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Obsolete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("Preliminary")
                        .HasColumnType("bit");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("GameSystemId");

                    b.ToTable("GameSystemFrameRates");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.Genre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.IpBan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mask")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("Mask")
                        .IsUnique();

                    b.ToTable("IpBans");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.MediaPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MediaPosts");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.PrivateMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DeletedForFromUser")
                        .HasColumnType("bit");

                    b.Property<bool>("DeletedForToUser")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableBbCode")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableHtml")
                        .HasColumnType("bit");

                    b.Property<int>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SavedForFromUser")
                        .HasColumnType("bit");

                    b.Property<bool>("SavedForToUser")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId", "ReadOn", "DeletedForToUser");

                    b.ToTable("PrivateMessages");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AdditionalAuthors")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Branch")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmulatorVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Frames")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("MovieFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MovieFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ObsoletedById")
                        .HasColumnType("int");

                    b.Property<int>("RerecordCount")
                        .HasColumnType("int");

                    b.Property<int>("RomId")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<int>("SystemFrameRateId")
                        .HasColumnType("int");

                    b.Property<int>("SystemId")
                        .HasColumnType("int");

                    b.Property<int>("TierId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WikiContentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ObsoletedById");

                    b.HasIndex("RomId");

                    b.HasIndex("SubmissionId")
                        .IsUnique();

                    b.HasIndex("SystemFrameRateId");

                    b.HasIndex("SystemId");

                    b.HasIndex("TierId");

                    b.HasIndex("WikiContentId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.PublicationAuthor", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PublicationId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PublicationId");

                    b.HasIndex("PublicationId");

                    b.ToTable("PublicationAuthors");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.PublicationFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PublicationId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("PublicationFiles");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.PublicationFlag", b =>
                {
                    b.Property<int>("PublicationId")
                        .HasColumnType("int");

                    b.Property<int>("FlagId")
                        .HasColumnType("int");

                    b.HasKey("PublicationId", "FlagId");

                    b.HasIndex("FlagId");

                    b.HasIndex("PublicationId");

                    b.ToTable("PublicationFlags");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.PublicationRating", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PublicationId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("UserId", "PublicationId", "Type");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserId", "PublicationId", "Type")
                        .IsUnique();

                    b.ToTable("PublicationRatings");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.PublicationTag", b =>
                {
                    b.Property<int>("PublicationId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("PublicationId", "TagId");

                    b.HasIndex("PublicationId");

                    b.HasIndex("TagId");

                    b.ToTable("PublicationTags");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.PublicationUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublicationId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("Type");

                    b.ToTable("PublicationUrls");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AutoAssignPostCount")
                        .HasColumnType("int");

                    b.Property<bool>("AutoAssignPublications")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.RoleLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleLinks");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<bool>("CanAssign")
                        .HasColumnType("bit");

                    b.HasKey("RoleId", "PermissionId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AdditionalAuthors")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Branch")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmulatorVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EncodeEmbedLink")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Frames")
                        .HasColumnType("int");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("GameName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GameVersion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ImportedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(16,4)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("IntendedTierId")
                        .HasColumnType("int");

                    b.Property<int?>("JudgeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegacyAlerts")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LegacyTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(16,4)")
                        .HasDefaultValue(0m);

                    b.Property<string>("MovieExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("MovieFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("MovieStartType")
                        .HasColumnType("int");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int?>("RejectionReasonId")
                        .HasColumnType("int");

                    b.Property<int>("RerecordCount")
                        .HasColumnType("int");

                    b.Property<int?>("RomId")
                        .HasColumnType("int");

                    b.Property<string>("RomName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SubmitterId")
                        .HasColumnType("int");

                    b.Property<int?>("SystemFrameRateId")
                        .HasColumnType("int");

                    b.Property<int?>("SystemId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WikiContentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("IntendedTierId");

                    b.HasIndex("JudgeId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RejectionReasonId");

                    b.HasIndex("RomId");

                    b.HasIndex("Status");

                    b.HasIndex("SubmitterId");

                    b.HasIndex("SystemFrameRateId");

                    b.HasIndex("SystemId");

                    b.HasIndex("WikiContentId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.SubmissionAuthor", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SubmissionId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("SubmissionAuthors");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.SubmissionRejectionReason", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName")
                        .IsUnique();

                    b.ToTable("SubmissionRejectionReasons");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.SubmissionStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.ToTable("SubmissionStatusHistory");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("([Code] IS NOT NULL)");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Tier", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("([Name] IS NOT NULL)");

                    b.ToTable("Tiers");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("From")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastLoggedInTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegacyPassword")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MoodAvatarUrlBase")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("PublicRatings")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("UseRatings")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.UserDisallow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegexPattern")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RegexPattern")
                        .IsUnique()
                        .HasDatabaseName("UserDisallowRegexPatternIndex")
                        .HasFilter("([RegexPattern] IS NOT NULL)");

                    b.ToTable("UserDisallows");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.UserFile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("CompressionType")
                        .HasColumnType("int");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Downloads")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Frames")
                        .HasColumnType("int");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(10,3)");

                    b.Property<int>("LogicalLength")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalLength")
                        .HasColumnType("int");

                    b.Property<int>("Rerecords")
                        .HasColumnType("int");

                    b.Property<int?>("SystemId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("UploadTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<string>("Warnings")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GameId");

                    b.HasIndex("Hidden");

                    b.HasIndex("SystemId");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.UserFileComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("UserFileId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserFileId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFileComments");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.WikiPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ChildId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Markup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MinorEdit")
                        .HasColumnType("bit");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Revision")
                        .HasColumnType("int");

                    b.Property<string>("RevisionMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("PageName", "Revision")
                        .IsUnique()
                        .HasDatabaseName("PageNameIndex")
                        .HasFilter("([PageName] IS NOT NULL)");

                    b.ToTable("WikiPages");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.WikiPageReferral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Excerpt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Referral")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Referrer")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("WikiReferrals");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Awards.PublicationAward", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Awards.Award", "Award")
                        .WithMany()
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.Publication", "Publication")
                        .WithMany("PublicationAwards")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Award");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Awards.UserAward", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Awards.Award", "Award")
                        .WithMany()
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.User", "User")
                        .WithMany("UserAwards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Award");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.Forum", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Forum.ForumCategory", "Category")
                        .WithMany("Forums")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPollOption", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Forum.ForumPoll", "Poll")
                        .WithMany("PollOptions")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPollOptionVote", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Forum.ForumPollOption", "PollOption")
                        .WithMany("Votes")
                        .HasForeignKey("PollOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PollOption");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPost", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.User", "Poster")
                        .WithMany("Posts")
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.Forum.ForumTopic", "Topic")
                        .WithMany("ForumPosts")
                        .HasForeignKey("TopicId");

                    b.Navigation("Poster");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumTopic", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Forum.Forum", "Forum")
                        .WithMany("ForumTopics")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.Forum.ForumPoll", "Poll")
                        .WithOne("Topic")
                        .HasForeignKey("TASVideos.Data.Entity.Forum.ForumTopic", "PollId");

                    b.HasOne("TASVideos.Data.Entity.User", "Poster")
                        .WithMany("Topics")
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Forum");

                    b.Navigation("Poll");

                    b.Navigation("Poster");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumTopicWatch", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Forum.ForumTopic", "ForumTopic")
                        .WithMany("ForumTopicWatches")
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.User", "User")
                        .WithMany("ForumTopicWatches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ForumTopic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.Game", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Game.GameSystem", "System")
                        .WithMany("Games")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("System");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameGameGroup", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Game.GameGroup", "GameGroup")
                        .WithMany("Games")
                        .HasForeignKey("GameGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.Game.Game", "Game")
                        .WithMany("GameGroups")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameGroup");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameGenre", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Game.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.Game.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameRamAddress", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Game.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("TASVideos.Data.Entity.Game.GameRamAddressDomain", "GameRamAddressDomain")
                        .WithMany()
                        .HasForeignKey("GameRamAddressDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.Game.GameSystem", "System")
                        .WithMany()
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameRamAddressDomain");

                    b.Navigation("System");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameRamAddressDomain", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Game.GameSystem", "System")
                        .WithMany()
                        .HasForeignKey("GameSystemId");

                    b.Navigation("System");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameRom", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Game.Game", "Game")
                        .WithMany("Roms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameSystemFrameRate", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Game.GameSystem", "System")
                        .WithMany("SystemFrameRates")
                        .HasForeignKey("GameSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("System");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.PrivateMessage", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.User", "FromUser")
                        .WithMany("SentPrivateMessages")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.User", "ToUser")
                        .WithMany("ReceivedPrivateMessages")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Publication", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Game.Game", "Game")
                        .WithMany("Publications")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.Publication", "ObsoletedBy")
                        .WithMany("ObsoletedMovies")
                        .HasForeignKey("ObsoletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TASVideos.Data.Entity.Game.GameRom", "Rom")
                        .WithMany("Publications")
                        .HasForeignKey("RomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.Submission", "Submission")
                        .WithOne("Publication")
                        .HasForeignKey("TASVideos.Data.Entity.Publication", "SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.Game.GameSystemFrameRate", "SystemFrameRate")
                        .WithMany()
                        .HasForeignKey("SystemFrameRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.Game.GameSystem", "System")
                        .WithMany("Publications")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.Tier", "Tier")
                        .WithMany()
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.WikiPage", "WikiContent")
                        .WithMany()
                        .HasForeignKey("WikiContentId");

                    b.Navigation("Game");

                    b.Navigation("ObsoletedBy");

                    b.Navigation("Rom");

                    b.Navigation("Submission");

                    b.Navigation("System");

                    b.Navigation("SystemFrameRate");

                    b.Navigation("Tier");

                    b.Navigation("WikiContent");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.PublicationAuthor", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Publication", "Publication")
                        .WithMany("Authors")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.User", "Author")
                        .WithMany("Publications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.PublicationFile", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Publication", "Publication")
                        .WithMany("Files")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.PublicationFlag", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Flag", "Flag")
                        .WithMany()
                        .HasForeignKey("FlagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.Publication", "Publication")
                        .WithMany("PublicationFlags")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flag");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.PublicationRating", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Publication", "Publication")
                        .WithMany("PublicationRatings")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.User", "User")
                        .WithMany("PublicationRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.PublicationTag", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Publication", "Publication")
                        .WithMany("PublicationTags")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.Tag", "Tag")
                        .WithMany("PublicationTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.PublicationUrl", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Publication", "Publication")
                        .WithMany("PublicationUrls")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.RoleLink", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Role", "Role")
                        .WithMany("RoleLinks")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.RolePermission", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Role", "Role")
                        .WithMany("RolePermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Submission", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Game.Game", "Game")
                        .WithMany("Submissions")
                        .HasForeignKey("GameId");

                    b.HasOne("TASVideos.Data.Entity.Tier", "IntendedTier")
                        .WithMany()
                        .HasForeignKey("IntendedTierId");

                    b.HasOne("TASVideos.Data.Entity.User", "Judge")
                        .WithMany()
                        .HasForeignKey("JudgeId");

                    b.HasOne("TASVideos.Data.Entity.User", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.HasOne("TASVideos.Data.Entity.SubmissionRejectionReason", "RejectionReason")
                        .WithMany()
                        .HasForeignKey("RejectionReasonId");

                    b.HasOne("TASVideos.Data.Entity.Game.GameRom", "Rom")
                        .WithMany("Submissions")
                        .HasForeignKey("RomId");

                    b.HasOne("TASVideos.Data.Entity.User", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId");

                    b.HasOne("TASVideos.Data.Entity.Game.GameSystemFrameRate", "SystemFrameRate")
                        .WithMany()
                        .HasForeignKey("SystemFrameRateId");

                    b.HasOne("TASVideos.Data.Entity.Game.GameSystem", "System")
                        .WithMany("Submissions")
                        .HasForeignKey("SystemId");

                    b.HasOne("TASVideos.Data.Entity.WikiPage", "WikiContent")
                        .WithMany()
                        .HasForeignKey("WikiContentId");

                    b.Navigation("Game");

                    b.Navigation("IntendedTier");

                    b.Navigation("Judge");

                    b.Navigation("Publisher");

                    b.Navigation("RejectionReason");

                    b.Navigation("Rom");

                    b.Navigation("Submitter");

                    b.Navigation("System");

                    b.Navigation("SystemFrameRate");

                    b.Navigation("WikiContent");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.SubmissionAuthor", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Submission", "Submission")
                        .WithMany("SubmissionAuthors")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.User", "Author")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.SubmissionStatusHistory", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Submission", "Submission")
                        .WithMany("History")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.UserFile", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.User", "Author")
                        .WithMany("UserFiles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.Game.Game", "Game")
                        .WithMany("UserFiles")
                        .HasForeignKey("GameId");

                    b.HasOne("TASVideos.Data.Entity.Game.GameSystem", "System")
                        .WithMany()
                        .HasForeignKey("SystemId");

                    b.Navigation("Author");

                    b.Navigation("Game");

                    b.Navigation("System");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.UserFileComment", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.UserFileComment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("TASVideos.Data.Entity.UserFile", "UserFile")
                        .WithMany("Comments")
                        .HasForeignKey("UserFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.User", "User")
                        .WithMany("UserFileComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("User");

                    b.Navigation("UserFile");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.UserRole", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASVideos.Data.Entity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.WikiPage", b =>
                {
                    b.HasOne("TASVideos.Data.Entity.WikiPage", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.Forum", b =>
                {
                    b.Navigation("ForumTopics");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumCategory", b =>
                {
                    b.Navigation("Forums");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPoll", b =>
                {
                    b.Navigation("PollOptions");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumPollOption", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Forum.ForumTopic", b =>
                {
                    b.Navigation("ForumPosts");

                    b.Navigation("ForumTopicWatches");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.Game", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("GameGroups");

                    b.Navigation("Publications");

                    b.Navigation("Roms");

                    b.Navigation("Submissions");

                    b.Navigation("UserFiles");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameGroup", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameRom", b =>
                {
                    b.Navigation("Publications");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.GameSystem", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Publications");

                    b.Navigation("Submissions");

                    b.Navigation("SystemFrameRates");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Game.Genre", b =>
                {
                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Publication", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Files");

                    b.Navigation("ObsoletedMovies");

                    b.Navigation("PublicationAwards");

                    b.Navigation("PublicationFlags");

                    b.Navigation("PublicationRatings");

                    b.Navigation("PublicationTags");

                    b.Navigation("PublicationUrls");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Role", b =>
                {
                    b.Navigation("RoleLinks");

                    b.Navigation("RolePermission");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Submission", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Publication");

                    b.Navigation("SubmissionAuthors");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.Tag", b =>
                {
                    b.Navigation("PublicationTags");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.User", b =>
                {
                    b.Navigation("ForumTopicWatches");

                    b.Navigation("Posts");

                    b.Navigation("PublicationRatings");

                    b.Navigation("Publications");

                    b.Navigation("ReceivedPrivateMessages");

                    b.Navigation("SentPrivateMessages");

                    b.Navigation("Submissions");

                    b.Navigation("Topics");

                    b.Navigation("UserAwards");

                    b.Navigation("UserFileComments");

                    b.Navigation("UserFiles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.UserFile", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TASVideos.Data.Entity.UserFileComment", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
